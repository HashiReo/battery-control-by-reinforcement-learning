@startuml Class_Diagram
'main.py
package "main"{
  class None {
    --
    +perform_daily_operations()
    +process_operations()
    +main()
  }
}
' RL_visualize.py
package "RL_visualize"{
  class RL_visualize {
  -steps: int
  -all_rewards: list
  --
  +__init__(episode: int, all_rewards: list): void
  +descr_schedule(action: list, PVout: list, energy_transfer: list, soc: list, mode: int): Figure
  +descr_reward(episode: int, reward: list): Figure
  +descr_price(): Figure
  }
}
' RL_env.py
package "RL_env" {
  class ESS_ModelEnv {
    -dfmanager: Dataframe_Manager
    -df_train: DataFrame
    -df_test: DataFrame
    -df_resultform: DataFrame
    -battery_max_cap: float
    -inverter_max_cap: float
    -soc_list: list
    -action_space: gym.spaces.Box
    -observation_space: gym.spaces.Box
    -state_idx: int
    -reward_total: float
    -reward_list: list
    +episode_rewards: list
    -reward: float
    -observation: list
    -recent_reward: float
    -info: dict
    -done: bool
    -PV_gen: float
    -price: float
    -bid_energy: float
    -reward: float
    --
    +__init__()
    -step(action: list): Tuple
    -reset(): list
    -_get_reward(action: list, SoC: float): float
  }
}
package gym {
  class Env
}
' RL_dataframe_manager.py
package "RL_dataframe_manager"{
  class Dataframe_Manager {
    +df_traindata: Dataframe
    -price_predict: Dataframe
    -pv_predict: Dataframe
    +df_testdata: Dataframe
    -col: list
    -dfmanager: Dataframe_Manager()
    +dataframe: Dataframe
    -df_result
    --
    +get_train_df(): Dataframe
    +get_test_df(): Dataframe
    +get_resultform_df(): Dataframe
    -write_testresult_csv(data: Dataframe): void
  }
}
' RL_operate.py
package "RL_operate"{
  class Battery_operate {
      -BATTERY_CAPACITY: int
      -INITIAL_SOC: float
      -df_result: DataFrame
      -delta_PV: Series
      --
      +__init__()
      +operate_bid()
  }
}
' parameters.py
package "parameters"{
  class Parameters {
    +ALPHA: float
    +SOFTEN_: int
    +N_LAMBDA: int
    +BETA: float
    +EPOCHS : int
    +LR: float
    +SEED: int
    +DAYS: int
    +N_VERIFICATION: int
    +LOWER_ALPHA: float
    +UPPER_ALPHA: float
    +LR: float
    +M_TR: int
    +M_LE: int
    +N_E: int
    +SEED_QR: int
    +NUMBER_OF_FEATURES: int
    +BATTERY_CAPACITY: int
    +INITIAL_SOC: float
    }
}
' RL_main.py
package "RL_main"{
  class None {
    -trainModel: Dataframe
    -testModel: Dataframe
    -dfmanager: Dataframe
    -RL_dataframe_manager: Dataframe
  }
}
' RL_train.py
package "RL_train" {
  class TrainModel {
    -path: str
    -env: ESS_ModelEnv 
    --
    +__init__()
    +dispatch_train()
  }
}
' PPO
package "stable_baseline3" {
  class PPO {
  }
}
' RL_test.py
package "RL_test" {
  class TestModel {
    -env: ESS_ModelEnv
    -dfmanager: Dataframe_Manager
    -df_test: DataFrame
    -soc_list: List
    -action_list: List
    -obs_list: List
    -model: PPO
    -df_testresult: DataFrame
    --
    +__init__()
    +dispatch_test(model_name: str): DataFrame
  }
}
'result_inputdata_reference.py
package "result_inputdata_reference"{
  class None {
    -df: Dataframe(result_dataframe.csv)
    --
  }
}
'result_evaluation.py
package "result_evaluation"{
  class None {
    -dataframe: Dataframe(result_dataframe.csv)
    -data: Dataframe(input_data2022.csv)
    --
  }
}
'weather_data_realtime.py
package "weather_data_realtime"{
  class None {
    --
    +main()
    +data_acquisition()
  }
}
'pv_predict.py
package "pv_predict"{
  class None {
    --
    +seed_everything(seed: int)
    +get_feature_gain()
    +train_test(day, use_col)
    +qd_objective(y_true, y_pred)
    +get_LUBE()
  }
}
'price_predict.py
package "price_predict"{
  class None {
    --
  }
}
'PV_actual.py
package "PV_actual"{
  class None {
    --
    +calculate_solar_power(input_file?: csv)
  }
}

'price_predict.py
package "price_predict"{
  class None {
    --
    +None
  }
}

'result_graph.py
package "result_graph"{
  class None {
    --
    +None
  }
}

'RL_database_utils.py
package "RL_database_utils"{
  class BatteryControlDatabase {
    --
    +__init__()
    +updata_data()
  }
}

'weather_data_bid_independent.py
package "weather_data_bid_independent"{
  class None {
    --
    +data_acquisition()
  }
}

'weather_data.csv
package "weather_dataCSV"{
  class CSV {
    --
  }
}
'weather_data_bid_multi-period.py
package "weather_data_bid_multi_period"{
  class None {
    --
    +data_acquisition()
    +cycle_oneday()
  }
}

'weather_data_bid.csv
package "weather_data_bidCSV"{
  class CSV {
    --
  }
}

'weather_data_bid.py
package "weather_data_bid"{
  class None {
    --
    +main()
    +data_acquisition()
  }
}

'weather_data_realtime_independent.py
package "weather_data_realtime_independent"{
  class None {
    --
    +data_acquisition()
  }
}

'weather_data_realtime.csv
package "weather_data_realtimeCSV"{
  class CSV {
    --
  }
}
'main関連
main ..> RL_visualize :<<import>>
main ..> RL_operate : <<import>>
main ..> RL_main : <<use>>
main ..> result_inputdata_reference : <<use>>
main ..> result_evaluation : <<use>>
main ..> weather_data_realtime : <<use>>
main ..> pv_predict : <<use>>
main ..> price_predict : <<use>>
RL_visualize ...> ESS_ModelEnv : <<import>>
RL_env ...|> gym.Env : <<import>>
RL_env ...> Dataframe_Manager : <<import>>
RL_operate ...> Parameters : <<import>>
RL_main ...> RL_train : <<import>>
RL_main ...> RL_test : <<import>>
RL_main ...> RL_dataframe_manager : <<import>>
RL_train ...> ESS_ModelEnv : <<import>>
RL_train ...> PPO : <<import>>
RL_test ...> ESS_ModelEnv : <<import>>
RL_test ...> Dataframe_Manager : <<import>>

'その他
weather_data_bid_independent ..> weather_data_bidCSV : <<create>>
weather_data_bid_independent ..> weather_dataCSV : <<create>>
weather_data_bid_multi_period ..> weather_data_bidCSV : <<create>>
weather_data_bid ..> weather_data_bidCSV : <<create>>
weather_data_bid ..> weather_dataCSV : <<create>>
weather_data_bid ..> BatteryControlDatabase : <<import>>
weather_data_realtime_independent ..> weather_data_realtimeCSV : <<create>>
weather_data_realtime_independent ..> weather_dataCSV : <<create>>
weather_data_realtime ..> weather_data_realtimeCSV : <<create>>
weather_data_realtime ..> weather_dataCSV : <<create>>
@enduml

